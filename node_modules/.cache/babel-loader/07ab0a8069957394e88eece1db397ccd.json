{"ast":null,"code":"import tinycolor from 'tinycolor2';\nimport convert from 'color-convert';\n\nclass Swatcher {\n  constructor(paperWhite, shadeTargetMultiplier) {\n    this.swatchWeights = ['900', '800', '700', '600', '500', '400', '300', '200', '100', '075', '050', '025'];\n    this.paperWhite = paperWhite;\n    this.shadeTargetMultiplier = shadeTargetMultiplier;\n  }\n\n  createSwatchRow(hexString) {\n    let color = tinycolor(hexString);\n    let shadeTargets = this.createShadeTargets(color);\n    let tintTargets = this.createTintTargets(color);\n    let swatch900 = this.darkenToTarget(color.clone().saturate(10), shadeTargets.L_900);\n    let swatch800 = this.darkenToTarget(color.clone().saturate(5), shadeTargets.L_800);\n    let swatch700 = this.darkenToTarget(color.clone().saturate(3), shadeTargets.L_700);\n    let swatch600 = this.darkenToTarget(color.clone().saturate(2), shadeTargets.L_600);\n    let swatch500 = this.darkenToTarget(color.clone().saturate(0), shadeTargets.L_500);\n    let swatch400 = color;\n    let swatch300 = this.lightenToTarget(color.clone().saturate(0), tintTargets.L_300);\n    let swatch200 = this.lightenToTarget(color.clone().saturate(3), tintTargets.L_200);\n    let swatch100 = this.lightenToTarget(color.clone().saturate(5), tintTargets.L_100);\n    let swatch075 = this.lightenToTarget(color.clone().saturate(6), tintTargets.L_075);\n    let swatch050 = this.lightenToTarget(color.clone().saturate(8), tintTargets.L_050);\n    let swatch025 = this.lightenToTarget(color.clone().saturate(25), tintTargets.L_025);\n    return {\n      swatch900: swatch900.toHexString(),\n      swatch800: swatch800.toHexString(),\n      swatch700: swatch700.toHexString(),\n      swatch600: swatch600.toHexString(),\n      swatch500: swatch500.toHexString(),\n      swatch400: swatch400.toHexString(),\n      swatch300: swatch300.toHexString(),\n      swatch200: swatch200.toHexString(),\n      swatch100: swatch100.toHexString(),\n      swatch075: swatch075.toHexString(),\n      swatch050: swatch050.toHexString(),\n      swatch025: swatch025.toHexString()\n    };\n  }\n\n  getLightnessValue(hexString) {\n    return convert.hex.lab(hexString)[0];\n  }\n\n  darken(color) {\n    return tinycolor(color.clone()).darken(1);\n  }\n\n  lighten(color) {\n    return tinycolor(color.clone()).lighten(1);\n  }\n\n  darkenToTarget(color, targetValue) {\n    let result = color.clone();\n\n    while (this.getLightnessValue(result) > targetValue) {\n      result = this.darken(result);\n    }\n\n    return result;\n  }\n\n  lightenToTarget(color, targetValue) {\n    let result = color.clone();\n\n    while (this.getLightnessValue(result) < targetValue) {\n      result = this.lighten(result);\n    }\n\n    return result;\n  }\n\n  createShadeTargets(base) {\n    let L_400 = this.getLightnessValue(base);\n    let L_900 = L_400 * this.shadeTargetMultiplier;\n    let stepValue = (L_400 - L_900) / 5;\n    let L_800 = L_900 + stepValue * 1;\n    let L_700 = L_900 + stepValue * 2;\n    let L_600 = L_900 + stepValue * 3;\n    let L_500 = L_900 + stepValue * 4;\n    return {\n      L_900: L_900,\n      L_800: L_800,\n      L_700: L_700,\n      L_600: L_600,\n      L_500: L_500\n    };\n  }\n\n  createTintTargets(base) {\n    let L_400 = this.getLightnessValue(base);\n    let stepValue = (this.paperWhite - L_400) / 6;\n    let L_300 = L_400 + stepValue * 1;\n    let L_200 = L_400 + stepValue * 2;\n    let L_100 = L_400 + stepValue * 3;\n    let L_075 = L_400 + stepValue * 4;\n    let L_050 = L_400 + stepValue * 5;\n    return {\n      L_300: L_300,\n      L_200: L_200,\n      L_100: L_100,\n      L_075: L_075,\n      L_050: L_050,\n      L_025: this.paperWhite\n    };\n  }\n\n  isDark(hexString) {\n    return tinycolor(hexString).isDark();\n  }\n\n}\n\nexport default Swatcher;","map":{"version":3,"sources":["/Users/kmuldoon/Documents/Development/palettizer/src/swatcher/index.js"],"names":["tinycolor","convert","Swatcher","constructor","paperWhite","shadeTargetMultiplier","swatchWeights","createSwatchRow","hexString","color","shadeTargets","createShadeTargets","tintTargets","createTintTargets","swatch900","darkenToTarget","clone","saturate","L_900","swatch800","L_800","swatch700","L_700","swatch600","L_600","swatch500","L_500","swatch400","swatch300","lightenToTarget","L_300","swatch200","L_200","swatch100","L_100","swatch075","L_075","swatch050","L_050","swatch025","L_025","toHexString","getLightnessValue","hex","lab","darken","lighten","targetValue","result","base","L_400","stepValue","isDark"],"mappings":"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","sourcesContent":["import tinycolor from 'tinycolor2'\nimport convert from 'color-convert'\n\n\nclass Swatcher {\n    \n    swatchWeights = ['900', '800', '700', '600', '500', '400', '300', '200', '100', '075', '050', '025'];\n\n    constructor(paperWhite, shadeTargetMultiplier) {\n        this.paperWhite = paperWhite\n        this.shadeTargetMultiplier = shadeTargetMultiplier\n    }\n\n    createSwatchRow(hexString) {\n\n        let color = tinycolor(hexString)\n        let shadeTargets = this.createShadeTargets(color)\n        let tintTargets = this.createTintTargets(color)\n      \n        let swatch900 = this.darkenToTarget(color.clone().saturate(10), shadeTargets.L_900)\n        let swatch800 = this.darkenToTarget(color.clone().saturate(5), shadeTargets.L_800)\n        let swatch700 = this.darkenToTarget(color.clone().saturate(3), shadeTargets.L_700)\n        let swatch600 = this.darkenToTarget(color.clone().saturate(2), shadeTargets.L_600)\n        let swatch500 = this.darkenToTarget(color.clone().saturate(0), shadeTargets.L_500)\n        let swatch400 = color\n        let swatch300 = this.lightenToTarget(color.clone().saturate(0), tintTargets.L_300)\n        let swatch200 = this.lightenToTarget(color.clone().saturate(3), tintTargets.L_200)\n        let swatch100 = this.lightenToTarget(color.clone().saturate(5), tintTargets.L_100)\n        let swatch075 = this.lightenToTarget(color.clone().saturate(6), tintTargets.L_075)\n        let swatch050 = this.lightenToTarget(color.clone().saturate(8), tintTargets.L_050)\n        let swatch025 = this.lightenToTarget(color.clone().saturate(25), tintTargets.L_025)\n      \n        return {\n          swatch900: swatch900.toHexString(),\n          swatch800: swatch800.toHexString(),\n          swatch700: swatch700.toHexString(),\n          swatch600: swatch600.toHexString(),\n          swatch500: swatch500.toHexString(),\n          swatch400: swatch400.toHexString(),\n          swatch300: swatch300.toHexString(),\n          swatch200: swatch200.toHexString(),\n          swatch100: swatch100.toHexString(),\n          swatch075: swatch075.toHexString(),\n          swatch050: swatch050.toHexString(),\n          swatch025: swatch025.toHexString()\n        }\n      \n      }\n\n       getLightnessValue(hexString) {\n        return convert.hex.lab(hexString)[0]\n      }\n      \n        darken(color) {\n        return tinycolor(color.clone()).darken(1)\n      }\n\n        lighten(color) {\n        return tinycolor(color.clone()).lighten(1)\n      }\n    \n       darkenToTarget(color, targetValue) {\n        let result = color.clone()\n      \n        while (this.getLightnessValue(result) > targetValue) {\n          result = this.darken(result)\n        }\n      \n        return result\n      \n      }\n      \n       lightenToTarget(color, targetValue) {\n        let result = color.clone()\n      \n        while (this.getLightnessValue(result) < targetValue) {\n          result = this.lighten(result)\n        }\n      \n        return result\n    }\n\n    createShadeTargets(base) {\n        let L_400 = this.getLightnessValue(base)\n        let L_900 = L_400 * this.shadeTargetMultiplier\n      \n        let stepValue = (L_400 - L_900) / 5\n      \n        let L_800 = L_900 + (stepValue * 1)\n        let L_700 = L_900 + (stepValue * 2)\n        let L_600 = L_900 + (stepValue * 3)\n        let L_500 = L_900 + (stepValue * 4)\n      \n        return {\n          L_900: L_900,\n          L_800: L_800,\n          L_700: L_700,\n          L_600: L_600,\n          L_500: L_500\n        }\n      }\n\n    createTintTargets(base) {\n        let L_400 = this.getLightnessValue(base)\n      \n        let stepValue = (this.paperWhite - L_400) / 6\n      \n        let L_300 = L_400 + (stepValue * 1)\n        let L_200 = L_400 + (stepValue * 2)\n        let L_100 = L_400 + (stepValue * 3)\n        let L_075 = L_400 + (stepValue * 4)\n        let L_050 = L_400 + (stepValue * 5)\n      \n        return {\n          L_300: L_300,\n          L_200: L_200,\n          L_100: L_100,\n          L_075: L_075,\n          L_050: L_050,\n          L_025: this.paperWhite,\n        }\n      }\n\n      isDark(hexString) {\n        return tinycolor(hexString).isDark() \n      }\n\n}\n\nexport default Swatcher;\n"]},"metadata":{},"sourceType":"module"}